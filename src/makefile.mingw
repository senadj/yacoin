# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# yacoin 4.5 mingw makefile, use with:
# TDM-GCC GCC 5 Series MinGW 32-bit Edition
# boost 1.54
# BerkleyDB db-4.8.30.NC
# openssl-1.0.1l

CXX ?= g++

USE_UPNP:=1
USE_LEVELDB:=1
USE_IPV6:=-

BOOST_SUFFIX?=-mgw51-mt-1_54

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)/scrypt-jane" \
 -I"C:\depsmingw\boost_1_54_0" \
 -I"C:\depsmingw\db-4.8.30.NC\build_unix" \
 -I"C:\depsmingw\openssl-1.0.1l\include"

LIBPATHS= \
 -L"C:\depsmingw\boost_1_54_0\stage\lib" \
 -L"C:\depsmingw\db-4.8.30.NC\build_unix" \
 -L"C:\depsmingw\openssl-1.0.1l"

LIBS= \
 -l boost_system$(BOOST_SUFFIX) \
 -l boost_filesystem$(BOOST_SUFFIX) \
 -l boost_program_options$(BOOST_SUFFIX) \
 -l boost_thread$(BOOST_SUFFIX) \
 -l boost_chrono$(BOOST_SUFFIX) \
 -l db_cxx \
 -l ssl \
 -l crypto

DEFS= \
	-DWIN32 \
	-D_WINDOWS \
	-DBOOST_THREAD_USE_LIB \
	-DBOOST_SPIRIT_THREADSAFE \
	-D__STDC_FORMAT_MACROS

# DEBUGFLAGS=-g

CFLAGS= \
	-mthreads \
	-O2 \
	-msse2 \
	-w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
	$(DEBUGFLAGS) \
	$(DEFS) \
	$(INCLUDEPATHS)

LDFLAGS= \
	-Wl,--dynamicbase \
	-Wl,--nxcompat \
	-Wl,--large-address-aware \
	-static

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
 INCLUDEPATHS += -I"C:\depsmingw"
 LIBPATHS += -L"C:\depsmingw\miniupnpc"
 LIBS += -l miniupnpc -liphlpapi
 DEFS += -DSTATICLIB -DMINIUPNP_STATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS += \
	-l kernel32 \
	-l user32 \
	-l gdi32 \
	-l comdlg32 \
	-l winspool \
	-l winmm \
	-l shell32 \
	-l comctl32 \
	-l ole32 \
	-l oleaut32 \
	-l uuid \
	-l rpcrt4 \
	-l advapi32 \
	-l ws2_32 \
	-l mswsock

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/stun.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
	obj/scrypt-jane.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
	obj/scrypt.o \
	obj/scrypt-x86.o \
	obj/scrypt-x86_64.o

all: yacoind.exe

#
# LevelDB support, with mingw shlwapi lib must come at the end!
#
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a -l shlwapi
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o

leveldb/libleveldb.a:
	cd leveldb; make libleveldb.a libmemenv.a; cd ..

obj/txdb-leveldb.o: leveldb/libleveldb.a

obj/%.o: %.cpp $(HEADERS)
	g++ -c -frandom-seed=$@ $(CFLAGS) -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	g++ -c -frandom-seed=$@ $(CFLAGS) -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	g++ -c -frandom-seed=$@ $(CFLAGS) -o $@ $<

obj/scrypt-jane.o: scrypt-jane/scrypt-jane.c
	gcc -c -O3 -msse2 -DSCRYPT_CHACHA -DSCRYPT_KECCAK512 -DSCRYPT_CHOOSE_COMPILETIME -o obj/scrypt-jane.o scrypt-jane/scrypt-jane.c

yacoind.exe: $(OBJS:obj/%=obj/%)
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)
	strip yacoind.exe

clean:
	rm -f yacoind.exe
	find . -name *.a | xargs rm -f
	find leveldb -name *.o | xargs rm -f
	find obj -name *.o | xargs rm -f

FORCE:
